Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Julio Lins

------------------------------------------------------------------------
Student 2: What is your name?

Rishabh Rout

------------------------------------------------------------------------
How many late days are you using on this assignment?



------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."



------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
For each of the first three faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insertPath()
---------------------------------------------------------------
         ./bdtBad2        BDT_newNode()
---------------------------------------------------------------
         ./bdtBad3        BDT_unlinkParentToChild()
===============================================================

For bdtBad4, you do not have to find the bug. Instead, indicate what
is different about trying to debug this executable in gdb versus the
other three:

      Unlike for the other three modules, every time we run bdtBad4
      in the shell, we get different garbage results, because the
      shell separates different parts of memory for the program (as
      though it was not deterministic). But when we run it on gdb,
      we always get the same output (because gdb uses the same location
      in memory).

      Incidentally, the bug is located in BDT_toString(), where result
      is malloc'ed but not initialized.



For bdtBad5, you do not have to find the bug. Instead, indicate one
hypothesis for how the program could crash within the DynArray module,
which we promise is itself correct:

      If DynArray is correct, the only way the program could crash
      within it is if the client violates the contract, sending
      wrong parameters to DynArray (which, in fact, is what happens).

      The bug is in BDT_toString, where DynArray_new is built with
      count + 1 as argument instead of just count.

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

dtGood.c:

DT_traversePath is unnecessary. Could have been merged with
DT_traversePathFrom.

DT_traversePathFrom has lines of code that are too long. It could
benefit from:
    - Storing the return value of some functions into variables
      to improve readability and shorten certain lines
      (as with Node_getPath).
    - if body of if has return, no need to write else statement
      to check follow up condition.

DT_insertRestOfPath is overly nested and complex. Some ideas for how it
could improve:
    - Some nested if statements could have been rewritten with &&.
    - If body of if has return, no need to write else statement to check
      follow-up condition.
    - Could have added local comments to explain implementation.
    - Additional suggestions in nodeGood.c section.

DT_rmPath would become more efficient if:
    - it checked whether strcmp(path, Node_getPath(curr)) == 0 instead
      of curr == NULL. That in turn would eliminate one if statement in
      DT_rmPathAt.
    - Additional suggestions in nodeGood.c section.

Some lines of code in DT_toString are too long. Furthermore, it could
have added local comments to explain use of DynArray_map.

In dtGood.c, functions and respective static helper functions should be
grouped together whenever possible, and not loosely distributed, to
facilitate tracing the function.

See additional critique of DT_[un]linkParentToChild below.

------------------------------------------------------------------------
nodeGood.c / node.h:

node.h interface could have been extended to deal with removal and
insertion of paths. This would:
    - further simplify dt.c (eliminating the DT_[un]linkParentToChild
      functions, and simplifying DT_rmPath and DT_insertPath).
    - Reinforce weak coupling and strong cohesion, since as it is there
      is a lot of back and forth between DT and Node modules.
    - Even the traversals of the tree (as in DT_traversePathFrom) could
      have been dealt with by node.c, for the same reasons.


node.h interface's functions do not have a consistent parameter order.
To improve consistency, it could:
    - Set the pattern (Node_T parent, const char* dir) or
      (const char* dir, Node_T parent) and change the signatures of
      Node_create, Node_hasChild, and Node_addChild accordingly.


nodeGood.c has two versions of Node_getPath, v.1 returns a const
pointer to the node's actual path, while v.2 returns a defensive copy.
It should:
    - Establish a clearer contract in node.h, specifying who owns the
      returned string - the client or the implementation.
    - Change the implementation accordingly, either using v.1 or v.2.
    - v.1 is preferred, since v.2 is identical to Node_toString


Some functions are not called from outside modules:
    - Node_hasChild is only called by Node_linkChild, so it could become
      a static function instead.
    - Node_addChild is never called either from inside or from outside
      the module. So it could be deleted or, at least, become static.
    - In both cases, removing these functions from node.h would
      reinforce a minimal interface.


Node_linkChild should have local comments to explain various if
statements.


Some functions, such as Node_toString, Node_getParent,
Node_getChild, fail to call CheckerDT to check invariants, possibly
failing to report errors.

------------------------------------------------------------------------
